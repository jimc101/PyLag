[GENERAL]
# Logging
log_level = INFO

# Directory containing input files
in_dir = ./input

# Directory in which simulation output will be saved
out_dir = ./output

# Name of the netCDF data file to be created (without the nc extension)
output_file = %(out_dir)s/pylag


[SIMULATION]
# Simulation type
simulation_type = trace

# Initial positions data file
initial_positions_file = ./input/initial_positions.dat

# Depth coordinates
#   : depth_below_surface: Starting depth is given as the depth below the 
#     (moving) free surface in meters.
#   : hieght_above_bottom: Depth is given as the height above the sea floor
#     in meters.
depth_coordinates = depth_below_surface

# The time and date at which the first set of particles is released. The format is: yyyy-mm-dd hh:mm:ss
start_datetime = 2013-01-06 00:00:00

# Simulation end time - only used when running a single particle release
end_datetime = 2013-01-06 22:00:00

# Number of particle releases
number_of_particle_releases = 1

# Number of hours between particle releases
particle_release_interval_in_hours = 1.0

# Simulation duration - used to compute simulation end times with multiple particle releases
duration_in_days = 0.5

# Integration time step (s)
time_step = 5.0

# Numerical integration scheme for particle advection:
# RK4_2D - 2D fourth order Runga Kutta (uses horizontal velocities only)
# RK4_3D - 3D fourth order Runga Kutta (uses horizontal and vertical velocities)
num_integrator = RK4_3D

# Vertical random walk model:
# none - Run without vertical random walk enabled
# naive - Naive vertical random walk, only suitable for homogenous diffusivity 
# fields
# AR0 - Uncorrelated random walk with simple diffusion. Includes pseudo velocity
# correction for inhomgenous diffusivity fields
vertical_random_walk_model = AR0

# Horizontal random walk model:
# none - Run without horizontal random walk enabled
# constant - Use a constant value for the horizontal eddy diffusivity, which is
# then used with the random walk model. The constant is read from the config
# file (see config option horizontal_eddy_diffusivity_constant)
# naive - Naive horizontal random walk, only suitable for homogenous diffusivity 
# fields.
horizontal_random_walk_model = none

# Horizontal boundary condition calculator
# none - Run without a horizontal boundary condition calculator. This will only
# work successfully if there are no land boundaries, or if the setup is such that
# horizontal boundary crossings are impossible. If neither of these are true,
# expect runtime errors.
# reflecting - Apply reflecting horizontal boundary conditions
horiz_bound_cond = reflecting

# Vertical boundary condition calculator
# none - Run without a vertical boundary condition calculator. This will only
# work successfully for 2D (x,y) particle tracking.
# reflecting - Apply reflecting vertical boundary conditions
vert_bound_cond = reflecting

# Constant value for the horizontal eddy diffusivity (units: m^2/s). This value
# is only used if the constant horizontal_random_walk_model is enabled.
horizontal_eddy_diffusivity_constant = 10.0

# Frequency at which data is written to file (s)
output_frequency = 120.0

[OCEAN_CIRCULATION_MODEL]
# Name of the ocean circulation model or data source from which velocity data
# have been generated. Supported options include: "FVCOM".
name = FVCOM

# Directory containing model output files
data_dir = /home/jim/data/fvcom

# File containing grid info, in particular the adjacency. If not given, this
# data is extracted from the first data file, which will increase run times. 
# The full path is required.
grid_metrics_file = /home/jim/data/fvcom/grid_metrics.nc

# Data file name stem (e.g. "data_"). Files should be stored at the top level of
# `data_dir'. The model will automatically look for and concatenate across files
# whose names begin with this string (e.g. data_0001.nc, data_0002.nc etc etc). 
# If a grid metrics file is given make sure its file name does not match
# data_file_stem, otherwise the model will attempt to read this too.
data_file_stem = irish_sea_v20_0001

# Rounding interval (s) used for rounding datetime objects constructed from the
# model time variable, which may have been written to file with only limited
# numerical precision. e.g. a rounding interval of 3600s will round
# times to the nearest hour, and should be used for velocity fields specified
# at hourly intervals.
rounding_interval = 3600

