[GENERAL]
# Logging
log_level = INFO

# Directory containing input files
in_dir = ./input

# Directory in which simulation output will be saved
out_dir = ./output

# Name of the netCDF data file to be created (without the nc extension)
output_file = %(out_dir)s/pylag


[SIMULATION]
# Simulation type
simulation_type = trace

# Initial positions data file
initial_positions_file = ./input/initial_positions.dat

# Depth coordinates
#   : depth_below_surface: Starting depth is given as the depth below the 
#     (moving) free surface in meters.
#   : hieght_above_bottom: Depth is given as the height above the sea floor
#     in meters.
depth_coordinates = depth_below_surface

# The time and date at which the first set of particles is released. The format is: yyyy-mm-dd hh:mm:ss
start_datetime = 2013-01-06 00:00:00

# Simulation end time - only used when running a single particle release
end_datetime = 2013-01-06 01:00:00

# Number of particle releases
number_of_particle_releases = 1

# Number of hours between particle releases
particle_release_interval_in_hours = 1.0

# Simulation duration - used to compute simulation end times with multiple particle releases
duration_in_days = 0.5

# Numerical integration scheme for particle advection:
# none   - Run without advection
# RK4_2D - 2D fourth order Runga Kutta (uses horizontal velocities only)
# RK4_3D - 3D fourth order Runga Kutta (uses horizontal and vertical velocities)
num_integrator = RK4_3D

# Vertical Lagrangian Stochastic Models (LSMs):
# none     - Run without vertical LSM
# naive    - Naive vertical LSM, only suitable for homogenous diffusivity fields
# euler    - Uncorrelated LSM with simple diffusion. Includes pseudo velocity
#            correction for inhomgenous diffusivity fields
# visser   - Uncorrelated LSM with simple diffusion. Includes pseudo velocity
#            correction for inhomgenous diffusivity fields. Diffusivity evaluated
#            at a z position offset from Z_n.
# milstein - Uncorrelated LSM with simple diffusion. 1st order scheme in both the
#            the weak and strong sense.
vertical_lsm = visser

# Horizontal Lagrangian Stochastic Models (LSMs):
# none     - Run without LSM enabled
# constant - Use a constant value for the horizontal eddy diffusivity, which is
#            then used with the LSM. The constant is read from the config file (see
#            config option horizontal_eddy_diffusivity_constant)
# naive    - Naive horizontal random walk, only suitable for homogenous diffusivity 
#            fields.
horizontal_lsm = none

# Horizontal boundary condition calculator
# none - Run without a horizontal boundary condition calculator. This will only
# work successfully if there are no land boundaries, or if the setup is such that
# horizontal boundary crossings are impossible. If neither of these are true,
# expect runtime errors.
# reflecting - Apply reflecting horizontal boundary conditions
horiz_bound_cond = reflecting

# Vertical boundary condition calculator
# none - Run without a vertical boundary condition calculator. This will only
# work successfully for 2D (x,y) particle tracking.
# reflecting - Apply reflecting vertical boundary conditions
vert_bound_cond = reflecting

# Constant value for the horizontal eddy diffusivity (units: m^2/s). This value
# is only used if the constant horizontal_random_walk_model is enabled.
horizontal_eddy_diffusivity_constant = 10.0

# Frequency at which data is written to file (s)
output_frequency = 900.0

[OCEAN_CIRCULATION_MODEL]
# Name of the ocean circulation model or data source from which velocity data
# have been generated. Supported options include: "FVCOM".
name = FVCOM

# Directory containing model output files
data_dir = /home/jim/data/fvcom

# File containing grid info, in particular the adjacency. If not given, this
# data is extracted from the first data file, which will increase run times. 
# The full path is required.
grid_metrics_file = /home/jim/data/fvcom/grid_metrics.nc

# Data file name stem (e.g. "data_"). Files should be stored at the top level of
# `data_dir'. The model will automatically look for and concatenate across files
# whose names begin with this string (e.g. data_0001.nc, data_0002.nc etc etc). 
# If a grid metrics file is given make sure its file name does not match
# data_file_stem, otherwise the model will attempt to read this too.
data_file_stem = irish_sea_v20_0001

# Rounding interval (s) used for rounding datetime objects constructed from the
# model time variable, which may have been written to file with only limited
# numerical precision. e.g. a rounding interval of 3600s will round
# times to the nearest hour, and should be used for velocity fields specified
# at hourly intervals.
rounding_interval = 3600

# Do the output files include the vertical eddy diffusivity?
has_Kh = True

# Do the output files include the horizontal eddy viscosity?
has_Ah = True

[NUMERICS]
# The numerical method used to update particle positions. This option controls
# whether advection only, diffusion only, or both advection and diffusion
# contribute to particle motion. Different options are included for combining
# the effects of advection and diffusion, including two methods that employ operator
# splitting. Note that different numerical methods are used for advection, diffusion
# and advection plus diffusion combined. These are specified separately (see below).
# adv_only          - Advection only. The iterative method is set through the option
#                     `det_iterative_method'.
# diff_only         - Diffusion only. The iterative method is set through the option
#                     `stoc_iterative_method'.
# adv_diff          - Advection and diffusion combined. In this method, the 
#                     deterministic and stochastic parts of the Radom Displacement
#                     Model are solved simultaneously. The iterative method is set through
#                     the option `adv_stoc_iterative_method
# operator_split_0  - Advection and diffusion combined. Here, the advection step is
#                     performed first followed by the diffusion step. The diffusion
#                     step takes as input the position of the particle following
#                     the advection step. The iterative methods used for the advection
#                     and diffusion steps are set through the options `det_iterative_method'
#                     and `stoc_iterative_method' respectively. The parameter 
#                     `n_sub_time_steps' sets the number of diffusion time steps for each
#                     advection step.
# operator_split_1  - Advection and diffusion combined. First, a half diffusion time 
#                     step is performed followed by a full advection step followed
#                     by a half diffusion step. The iterative methods used for the advection
#                     and diffusion steps are set through the options `det_iterative_method'
#                     and `stoc_iterative_method' respectively. 
num_method = adv_only

# The iterative method used for deterministic advection:
# RK4_2D - 2D fourth order Runga Kutta (uses horizontal velocities only)
# RK4_3D - 3D fourth order Runga Kutta (uses horizontal and vertical velocities)
det_iterative_method = RK4_3D

# The iterative method used for stochastic diffusion:
# naive_1D          - 1D Naive scheme which is only suitable for homogeneous diffusivity 
#                     fields
# euler_1D          - 1D Euler sceheme which includes a pseudo velocity correction term for 
#                     inhomogeneous diffusivity fields. The sceheme converges with
#                     delta t and sqrt(delta t) in the weak and strong sense respectively.
# visser_1D         - 1D Visser scheme which includes a pseudo velocity correction for 
#                     inhomgeneous diffusivity fields. Diffusivities are evaluated at a z 
#                     position offset from Z_n. The sceheme converges with delta t and 
#                     sqrt(delta t) in the weak and strong sense respectively.
# milstein_[1,2,3]D - 1-, 2- or 3-D Milstein scheme that converges with delta t in both the
#                     strong and the weak sense.
stoc_iterative_method = milstein_1D
 
# The iterative method used for advection and diffusion combined. This option is
# only used when num_method = adv_diff. When operator splitting is employed,
# the iterative schemes used for advection and diffusion are set separately using
# the parameters `det_iterative_method' and `stoc_iterative_method'.
# milstein_3D - 3D Milstein scheme that converges with delta t in both the strong and the
#               weak sense.
det_stoc_iterative_method = milstein_3D

# The main time step used by the model (s)
time_step = 5

# The number of diffusion time steps for each advection step. This parameter is only
# used when num_method = operator_split_0 
n_sub_time_steps = 1
