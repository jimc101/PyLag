[GENERAL]
# Logging
log_level = INFO

# Directory containing input files
in_dir = ./input

# Directory in which simulation output will be saved
out_dir = ./output

# Name of the netCDF data file to be created (without the nc extension)
output_file = %(out_dir)s/pylag

[SIMULATION]
# Simulation type
simulation_type = trace

# Initial positions data file
initial_positions_file = ./input/initial_positions.dat

# Depth coordinates
#   : depth_below_surface: Starting depth is given as the depth below the 
#     (moving) free surface in meters.
#   : hieght_above_bottom: Depth is given as the height above the sea floor
#     in meters.
depth_coordinates = depth_below_surface

# The time and date at which the first set of particles is released. The format is: yyyy-mm-dd hh:mm:ss
start_datetime = 2013-01-06 00:00:00

# Simulation end time - only used when running a single particle release
end_datetime = 2013-01-06 22:00:00

# Number of particle releases
number_of_particle_releases = 1

# Number of hours between particle releases
particle_release_interval_in_hours = 1.0

# Simulation duration - used to compute simulation end times with multiple particle releases
duration_in_days = 0.5

# Constant value for the horizontal eddy diffusivity (units: m^2/s). This value
# is only used if the constant horizontal_random_walk_model is enabled.
horizontal_eddy_diffusivity_constant = 10.0

# Frequency at which data is written to file (s)
output_frequency = 900.0

[OCEAN_CIRCULATION_MODEL]
# Name of the ocean circulation model or data source from which velocity data
# have been generated. Supported options include: "FVCOM".
name = FVCOM

# Directory containing model output files
data_dir = /home/jim/data/fvcom

# File containing grid info, in particular the adjacency. If not given, this
# data is extracted from the first data file, which will increase run times. 
# The full path is required.
grid_metrics_file = %(data_dir)s/grid_metrics.nc

# Data file name stem (e.g. "data_"). Files should be stored at the top level of
# `data_dir'. The model will automatically look for and concatenate across files
# whose names begin with this string (e.g. data_0001.nc, data_0002.nc etc etc). 
# If a grid metrics file is given make sure its file name does not match
# data_file_stem, otherwise the model will attempt to read this too.
data_file_stem = irish_sea_v20_0001

# Rounding interval (s) used for rounding datetime objects constructed from the
# model time variable, which may have been written to file with only limited
# numerical precision. e.g. a rounding interval of 3600s will round
# times to the nearest hour, and should be used for velocity fields specified
# at hourly intervals.
rounding_interval = 3600

# Do the output files include the vertical eddy diffusivity?
has_Kh = True

# Do the output files include the horizontal eddy viscosity?
has_Ah = True

[NUMERICS]
# The numerical method used to compute changes in particle positions. This option
# controls whether operator splitting is used to combine the contributions of
# advection and diffusion.
# standard          - The iterative method is set through the option `iterative_method'.
#                     The specified iterative method may correspond to cases of pure
#                     advection, pure diffusion or both. In the case of both advection
#                     and diffusion, operator splitting is not performed; rather, the effects
#                     of both processes are computed at the same time using the same time step
#                     and using the specified iterative method. StdNumMethod objects require no
#                     knowledge or the type of iterative method being used; they simply
#                     use it compute the change in a particle's position.
# operator_split_0  - A form of operator splitting in which the advection step is
#                     performed first followed by the diffusion step. The iterative 
#                     methods used for the advection and diffusion steps are set through
#                     the options `adv_iterative_method' and `diff_iterative_method' 
#                     respectively. The two processes can use different time steps; these
#                     are set through the parameters `time_step_adv' and `time_step_diff'
#                     respectively. `time_step_adv' must be greater than or equal to
#                     `time_step_diff' and `time_step_adv'%`time_step_diff' must equal 0.
#                     An exception will be raised if either of these conditions is not
#                     met.
# operator_split_1  - A form of operator splitting in which a half step for diffusion 
#                     is performed first followed by a full advection step followed
#                     by a half diffusion step. The iterative methods used for the advection
#                     and diffusion steps are set through the options `adv_iterative_method'
#                     and `det_iterative_method' respectively. The two processes use different
#                     time steps; these are set through the parameters `time_step_adv' and
#                     `time_step_diff' respectively. `time_step_adv' must be exactly equal to
#                     2 * `time_step_diff'. An exception will be raised if this condition is not
#                     met.
num_method = standard

# The iterative method used to simulate pure advection, pure diffusion or both combined
# (in the absence of operator splitting). For deterministic methods that solve for advection
# only, "Adv" is appended to the beginning of the name. For stochastic methods that solve for
# diffusion only, "Diff" is appended to the beginning of the name. Lastly, for methods that do
# both advection and diffusion, "AdvDiff" is appended to the beginning of the name. The
# dimensionality of each scheme is implicit within the name. 1D schemes compute changes
# in position in e_k only; 2D schemes in e_i and e_j only; and 3D scehemes in e_i, e_j and e_k.
# Adv_RK4_2D - 2D fourth order Runga Kutta (uses horizontal velocities only)
# Adv_RK4_3D - 3D fourth order Runga Kutta (uses horizontal and vertical velocities)
# Diff_Naive_1D          - 1D Naive scheme; only suitable for homogeneous diffusivity fields.
# Diff_Euler_1D          - 1D Euler sceheme which includes a pseudo velocity correction term for 
#                          inhomogeneous diffusivity fields. The sceheme converges with
#                          delta t and sqrt(delta t) in the weak and strong sense respectively.
# Diff_Visser_1D         - 1D Visser scheme which includes a pseudo velocity correction for 
#                          inhomgeneous diffusivity fields. Diffusivities are evaluated at a z 
#                          position offset from Z_n. The scheme converges with delta t and 
#                          sqrt(delta t) in the weak and strong sense respectively.
# Diff_Milstein_[1,2,3]D - 1-, 2- or 3-D Milstein schemes that converge with delta t in both the
#                          strong and the weak sense.
# AdvDiff_Milstein_3D    - 3D Milstein scheme that converges with delta t in both the strong and the
#                          weak sense.
iterative_method = Adv_RK4_3D

# The iterative method used for advection when operator splitting is used:
adv_iterative_method = Adv_RK4_3D

# The iterative method used for diffusion when operator splitting is used:
diff_iterative_method = Diff_Milstein_3D

# The time step used by iterative methods that deal with advection only (s)
time_step_adv = 100

# The time step used by iterative methods that deal with either diffusion only
# or advection and diffusion combined (s).
time_step_diff = 5

[BOUNDARY_CONDITIONS]

# Horizontal boundary condition calculator
# None - Run without a horizontal boundary condition calculator. This will only
# work successfully if there are no land boundaries, or if the setup is such that
# horizontal boundary crossings are impossible. If neither of these are true,
# and this option is set to `None', an exception will be raised.
# reflecting - Apply reflecting horizontal boundary conditions
horiz_bound_cond = reflecting

# Vertical boundary condition calculator
# None - Run without a vertical boundary condition calculator. It is okay to set
# this to `None' if it is possible to guarantee a vertical boundadry will not be
# crossed (e.g. if the input data is 2D). An exception will be raised if a vertical
# boundary is crossed and this option is set to `None'.
# reflecting - Apply reflecting vertical boundary conditions
vert_bound_cond = reflecting

