"""
Data reader for input data generated by ROMS

Note
----
roms_data_reader is implemented in Cython. Only a small portion of the
API is exposed in Python with accompanying documentation. However, more
details can be found in `pylag.data_reader`, where a set of python wrappers
have been implemented.
"""


include "constants.pxi"

import logging

try:
    import configparser
except ImportError:
    import ConfigParser as configparser

import numpy as np

from cpython cimport bool

# Data types used for constructing C data structures
from pylag.data_types_python import DTYPE_INT, DTYPE_FLOAT
from pylag.data_types_cython cimport DTYPE_INT_t, DTYPE_FLOAT_t

from libcpp.string cimport string
from libcpp.vector cimport vector

# PyLag cython imports
from pylag.particle cimport Particle
from pylag.particle_cpp_wrapper cimport to_string
from pylag.data_reader cimport DataReader
from pylag.unstructured cimport UnstructuredGrid
cimport pylag.interpolation as interp
from pylag.math cimport int_min, float_min, get_intersection_point
from pylag.math cimport Intersection

# PyLag python imports
from pylag import variable_library
from pylag.numerics import get_time_direction


cdef class ROMSDataReader(DataReader):
    """ DataReader for inputs generated by ROMS
    
    Objects of type ROMSDataReader are intended to manage all access to
    data objects defined on ROMS's Arakawa C-grid , including data describing the
    model grid itself as well as model output variables. Provided are methods
    for searching the model grid for host horizontal elements and for
    interpolating gridded field data to a given point in space and time.

    On an Arakawa C-grid, u, v, w and rho points are offset. PyLag's approach to
    dealing with such grids is to create separate unstructured grids for each of
    the three different horizontal grids (for u, v and rho points), with the w
    horizontal grid being the same as the rho grid.
    
    Parameters
    ----------
    config : ConfigParser
        Configuration object.
    
    mediator : Mediator
        Mediator object for managing access to data read from file.


    """
    
    # Configurtion object
    cdef object config

    # Mediator for accessing model data read in from file
    cdef object mediator

    # List of environmental variables to read and save
    cdef object env_var_names

    # Unstructured grid objects for performing grid searching etc
    cdef UnstructuredGrid _unstructured_grid_u
    cdef UnstructuredGrid _unstructured_grid_v
    cdef UnstructuredGrid _unstructured_grid_rho

    # The name of the grid
    cdef string _name_grid_u
    cdef string _name_grid_v
    cdef string _name_grid_rho

    # Grid dimensions
    cdef DTYPE_INT_t _n_s_rho, _n_s_w
    cdef DTYPE_INT_t _n_longitude_grid_u, _n_latitude_grid_u, _n_elems_grid_u, _n_nodes_grid_u
    cdef DTYPE_INT_t _n_longitude_grid_v, _n_latitude_grid_v, _n_elems_grid_v, _n_nodes_grid_v
    cdef DTYPE_INT_t _n_longitude_grid_rho, _n_latitude_grid_rho, _n_elems_grid_rho, _n_nodes_grid_rho
    
    # Element connectivity
    cdef DTYPE_INT_t[:,:] _nv_grid_u
    cdef DTYPE_INT_t[:,:] _nv_grid_v
    cdef DTYPE_INT_t[:,:] _nv_grid_rho
    
    # Element adjacency
    cdef DTYPE_INT_t[:,:] _nbe_grid_u
    cdef DTYPE_INT_t[:,:] _nbe_grid_v
    cdef DTYPE_INT_t[:,:] _nbe_grid_rho
    
    # Minimum nodal x/y values
    cdef DTYPE_FLOAT_t _xmin_grid_u, _xmin_grid_v, _xmin_grid_rho
    cdef DTYPE_FLOAT_t _ymin_grid_u, _ymin_grid_v, _ymin_grid_rho

    # Depth coordinate variables
    cdef DTYPE_FLOAT_t[:] _s_rho, _cs_r, _s_w, _cs_w
    cdef DTYPE_FLOAT_t _hc

    # Actual depth levels, accounting for changes in sea surface elevation
    cdef DTYPE_FLOAT_t[:, :] _depth_levels_last
    cdef DTYPE_FLOAT_t[:, :] _depth_levels_next

    # Bathymetry
    cdef DTYPE_FLOAT_t[:] _h

    # Land sea mask on nodes (1 - sea point, 0 - land point)
    cdef DTYPE_INT_t[:] _mask_grid_u, _mask_grid_v, _mask_grid_rho

    # Land sea mask on rho grid element (1 - sea point, 0 - land point)
    cdef DTYPE_INT_t[:] _mask_c_grid_rho

    # Dictionary of dimension names
    cdef object _dimension_names

    # Dictionary of variable names
    cdef object _variable_names

    # Dictionary containing tuples of variable shapes without time (e.g. {'u': (n_dpeth, n_latitude, n_longitude)})
    cdef object _variable_shapes

    # Dictionaries of variable dimension indices (e.g. {'u': {'depth': 0, 'latitude': 1, 'longitude': 2}})
    cdef object _variable_dimension_indices

    # TODO Sea surface elevation
    cdef DTYPE_FLOAT_t[:] _zeta_last
    cdef DTYPE_FLOAT_t[:] _zeta_next
    
    # u/v/w velocity components
    cdef DTYPE_FLOAT_t[:,:] _u_last
    cdef DTYPE_FLOAT_t[:,:] _u_next
    cdef DTYPE_FLOAT_t[:,:] _v_last
    cdef DTYPE_FLOAT_t[:,:] _v_next
    cdef DTYPE_FLOAT_t[:,:] _w_last
    cdef DTYPE_FLOAT_t[:,:] _w_next
    
    # Vertical eddy diffusivities
    cdef DTYPE_FLOAT_t[:,:] _kh_last
    cdef DTYPE_FLOAT_t[:,:] _kh_next

    # Horizontal eddy viscosities
    cdef DTYPE_FLOAT_t[:,:] _ah_last
    cdef DTYPE_FLOAT_t[:,:] _ah_next

    # Wet/dry status of elements
    cdef DTYPE_INT_t[:] _wet_cells_last
    cdef DTYPE_INT_t[:] _wet_cells_next

    # Sea water potential temperature
    cdef DTYPE_FLOAT_t[:,:] _thetao_last
    cdef DTYPE_FLOAT_t[:,:] _thetao_next

    # Sea water salinity
    cdef DTYPE_FLOAT_t[:,:] _so_last
    cdef DTYPE_FLOAT_t[:,:] _so_next

    # Time direction
    cdef DTYPE_INT_t _time_direction

    # Time array
    cdef DTYPE_FLOAT_t _time_last
    cdef DTYPE_FLOAT_t _time_next

    # Flags that identify whether a given variable should be read in
    cdef bint _has_w, _has_Kh, _has_Ah, _has_is_wet,  _has_zeta

    def __init__(self, config, mediator):
        self.config = config
        self.mediator = mediator

        self._name_grid_u = b'grid_u'
        self._name_grid_v = b'grid_v'
        self._name_grid_rho = b'grid_rho'

        # Time direction
        self._time_direction = <int>get_time_direction(config)

        # Setup dimension name mappings
        self._dimension_names = {}
        dim_config_names = {'time': 'time_dim_name', 'depth': 'depth_dim_name',
                            'latitude_grid_u': 'latitude_dim_name_grid_u',
                            'longitude_grid_u': 'longitude_dim_name_grid_u',
                            'latitude_grid_v': 'latitude_dim_name_grid_v',
                            'longitude_grid_v': 'longitude_dim_name_grid_v',
                            'latitude_grid_rho': 'latitude_dim_name_grid_rho',
                            'longitude_grid_rho': 'longitude_dim_name_grid_rho'}

        for dim_name, config_name in dim_config_names.items():
            self._dimension_names[dim_name] = self.config.get('OCEAN_CIRCULATION_MODEL', config_name).strip()

        # Setup variable name mappings
        self._variable_names = {}
        var_config_names = {'uo': 'uo_var_name', 'vo': 'vo_var_name', 'wo': 'wo_var_name', 'zos': 'zos_var_name',
                            'Kh': 'Kh_var_name', 'Ah': 'Ah_var_name', 'thetao': 'thetao_var_name',
                            'so': 'so_var_name'}
        for var_name, config_name in var_config_names.items():
            try:
                var = self.config.get('OCEAN_CIRCULATION_MODEL', config_name).strip()
                if var:
                    self._variable_names[var_name] = var
            except (configparser.NoOptionError) as e:
                pass

        # Initialise dictionaries for variable shapes and dimension indices
        self._variable_shapes = {}
        self._variable_dimension_indices = {}

        # Set boolean flags
        self._has_zeta = True if 'zos' in self._variable_names else False
        self._has_w = True if 'wo' in self._variable_names else False
        self._has_Kh = True if 'Kh' in self._variable_names else False
        self._has_Ah = True if 'Ah' in self._variable_names else False

        # Has is wet flag?
        self._has_is_wet = self.config.getboolean("OCEAN_CIRCULATION_MODEL", "has_is_wet")

        # Check to see if any environmental variables are being saved.
        try:
            env_var_names = self.config.get("OUTPUT", "environmental_variables").strip().split(',')
        except (configparser.NoSectionError, configparser.NoOptionError) as e:
            env_var_names = []

        self.env_var_names = []
        for env_var_name in env_var_names:
            env_var_name = env_var_name.strip()
            if env_var_name is not None:
                if env_var_name not in self._variable_names.keys():
                    raise ValueError("Received request to track environmental tracer `{}'. However, "\
                            "the corresponding NetCDF variable name was not given. If the variable has been "\
                            "saved within the inputs, please specify its name in the run config.".format(env_var_name))

                if env_var_name not in variable_library.standard_variable_names.keys():
                    raise ValueError("Support for tracking the environmental tracer `{}' does not currently "\
                            "exist within PyLag".format(env_var_name))

                self.env_var_names.append(env_var_name)

        self._read_grid()

        self._read_time_dependent_vars()

    cpdef get_grid_names(self):
        """ Return a list of grid names

        Returns
        -------
         : list [str]
             List of grid names on which which input data are defined.
        """
        return [self._name_grid_u.decode(), self._name_grid_v.decode(), self._name_grid_rho.decode()]

    cpdef setup_data_access(self, start_datetime, end_datetime):
        """ Set up access to time-dependent variables.
        
        Parameters
        ----------
        start_datetime : Datetime
            Datetime object corresponding to the simulation start time.
        
        end_datetime : Datetime
            Datetime object corresponding to the simulation end time.
        """
        self.mediator.setup_data_access(start_datetime, end_datetime)

        self._read_time_dependent_vars()

    cpdef read_data(self, DTYPE_FLOAT_t time):
        """ Read in time dependent variable data from file?
        
        `time` is used to test if new data should be read in from file. If this
        is the case, arrays containing time-dependent variable data are updated.
        
        Parameters
        ----------
        time : float
            The current time.
        """
        cdef DTYPE_FLOAT_t time_fraction

        time_fraction = interp.get_linear_fraction(time, self._time_last, self._time_next)
        if self._time_direction == 1:
            if time_fraction < 0.0 or time_fraction >= 1.0:
                self.mediator.update_reading_frames(time)
                self._read_time_dependent_vars()
        else:
            if time_fraction <= 0.0 or time_fraction > 1.0:
                self.mediator.update_reading_frames(time)
                self._read_time_dependent_vars()

    cdef DTYPE_INT_t find_host(self, Particle *particle_old,
                               Particle *particle_new) except INT_ERR:
        """ Returns the host horizontal element.
        
        This function first tries to find the new host horizontal elements using
        a local search algorithm based on the new point's barycentric
        coordinates within the three grids. This is relatively fast. However,
        it can incorrectly flag that a particle has left the domain when in-fact
        it hasn't. For this reason, when the local host element search indicates
        that a particle has left the domain, a check is performed based on the particle's
        pathline - if this crosses a known boundary, the particle is deemed
        to have left the domain.

        The function returns a flag that indicates whether or not the particle
        has been found within the domain. If it has, it's host element will 
        have been set appropriately. If not, the the new particle's host
        element will have been set to the last host elements the particle passed
        through before exiting the domain.

        As the input data are defined on three separate horizontal grids, some care
        is needed when trying to handle boundary conditions. Land boundary crossings
        are only flagged on the rho grid. Meanwhile, open boundary crossings are
        tested for on all grids. If a particle exits any one of the three grids across
        an open boundary, it is flagged as having left the domain.
        
        Conventions
        -----------
        flag = IN_DOMAIN:
            This indicates that the particle was found successfully. The host element
            of the new particle on all three grids has been set.
        
        flag = LAND_BDY_CROSSED:
            This indicates that the particle exited the domain across a land
            boundary. Host elements are set to the last element the particle passed
            through before exiting the domain.

        flag = OPEN_BDY_CROSSED:
            This indicates that the particle exited the domain across an open
            boundary. Host elements are set to the last element the particle passed
            through before exiting the domain.
        
        Parameters
        ----------
        particle_old: *Particle
            The particle at its old position.

        particle_new: *Particle
            The particle at its new position. The host elements will be updated.
        
        Returns
        -------
        flag : int
            Integer flag that indicates whether or not the seach was successful.
        """
        cdef DTYPE_INT_t flag, host_grid_u, host_grid_v, host_grid_rho

        # Grid rho
        # --------
        host_grid_rho = particle_new.get_host_horizontal_elem(self._name_grid_rho)
        particle_new.set_host_horizontal_elem(self._name_grid_rho,
                                              particle_old.get_host_horizontal_elem(self._name_grid_rho))
        flag = self._unstructured_grid_rho.find_host_using_local_search(particle_new)

        if flag != IN_DOMAIN:
            particle_new.set_host_horizontal_elem(self._name_grid_rho, host_grid_rho)
            flag = self._unstructured_grid_rho.find_host_using_particle_tracing(particle_old,
                                                                                particle_new)

        if flag != IN_DOMAIN:
            return flag

        # Grid U
        # ------
        host_grid_u = particle_new.get_host_horizontal_elem(self._name_grid_u)
        particle_new.set_host_horizontal_elem(self._name_grid_u,
                                              particle_old.get_host_horizontal_elem(self._name_grid_u))
        flag = self._unstructured_grid_u.find_host_using_local_search(particle_new)

        # Double check to see if the particle has left the U-grid
        if flag != IN_DOMAIN:
            particle_new.set_host_horizontal_elem(self._name_grid_u, host_grid_u)
            flag = self._unstructured_grid_u.find_host_using_particle_tracing(particle_old,
                                                                              particle_new)
        # Check for open boundary crossing
        if flag == IN_DOMAIN:
            pass
        elif flag == OPEN_BDY_CROSSED:
            return flag
        elif flag == LAND_BDY_CROSSED:
            raise RuntimeError('Land boundary crossing detected on U grid suggesting invalid land mask. ')

        # Grid V
        # ------
        host_grid_v = particle_new.get_host_horizontal_elem(self._name_grid_v)
        particle_new.set_host_horizontal_elem(self._name_grid_v,
                                              particle_old.get_host_horizontal_elem(self._name_grid_v))
        flag = self._unstructured_grid_v.find_host_using_local_search(particle_new)

        # Double check to see if the particle has left the V-grid
        if flag != IN_DOMAIN:
            particle_new.set_host_horizontal_elem(self._name_grid_v, host_grid_v)
            flag = self._unstructured_grid_v.find_host_using_particle_tracing(particle_old,
                                                                              particle_new)
        if flag == LAND_BDY_CROSSED:
            raise RuntimeError('Land boundary crossing detected on V grid suggesting invalid land mask. ')

        return flag

    cdef DTYPE_INT_t find_host_using_local_search(self, Particle *particle) except INT_ERR:
        """ Set host horizontal elements through local searching
        
        Parameters
        ----------
        particle: *Particle
            The particle.

        Returns
        -------
        flag : int
            Integer flag that indicates whether or not the search was successful.
        """
        cdef DTYPE_INT_t flag

        flag = self._unstructured_grid_u.find_host_using_local_search(particle)
        if flag != IN_DOMAIN:
            return flag

        flag = self._unstructured_grid_v.find_host_using_local_search(particle)
        if flag != IN_DOMAIN:
            return flag

        flag = self._unstructured_grid_rho.find_host_using_local_search(particle)

        return flag

    cdef DTYPE_INT_t find_host_using_global_search(self, Particle *particle) except INT_ERR:
        """ Set host horizontal elements through global searching
        
        Parameters
        ----------
        particle_old: *Particle
            The particle.
        
        Returns
        -------
        flag : int
            Integer flag that indicates whether or not the search was successful.
        """
        cdef DTYPE_INT_t flag

        flag = self._unstructured_grid_u.find_host_using_global_search(particle)
        if flag != IN_DOMAIN:
            return flag

        flag = self._unstructured_grid_v.find_host_using_global_search(particle)
        if flag != IN_DOMAIN:
            return flag

        flag = self._unstructured_grid_rho.find_host_using_global_search(particle)

        return flag

    cdef Intersection get_boundary_intersection(self, Particle *particle_old, Particle *particle_new):
        """ Find the boundary intersection point

        Applied to the rho-grid only.

        Parameters
        ----------
        particle_old: *Particle
            The particle at its old position.

        particle_new: *Particle
            The particle at its new position.

        Returns
        -------
        intersection: Intersection
            Object describing the boundary intersection.
        """
        return self._unstructured_grid_rho.get_boundary_intersection(particle_old, particle_new)

    cdef set_default_location(self, Particle *particle):
        """ Set default location

        Move the particle to the centroid of the rho grid element it last passed through
        """
        self._unstructured_grid_rho.set_default_location(particle)

        # Use global searching to find the u and v grid hosts and local coordinates
        flag = self._unstructured_grid_u.find_host_using_global_search(particle)

        if flag == IN_DOMAIN:
            flag = self._unstructured_grid_v.find_host_using_global_search(particle)

        if flag != IN_DOMAIN:
            raise RuntimeError('Failed to set u and or v grid hosts/local coordinates')

        return

    cdef set_local_coordinates(self, Particle *particle):
        """ Set local coordinates

        Parameters
        ----------
        particle: *Particle
            Pointer to a Particle struct
        """
        self._unstructured_grid_grid_u.set_local_coordinates(particle)
        self._unstructured_grid_grid_v.set_local_coordinates(particle)
        self._unstructured_grid_grid_rho.set_local_coordinates(particle)

        return

    cdef DTYPE_INT_t set_vertical_grid_vars(self, DTYPE_FLOAT_t time,
                                            Particle *particle) except INT_ERR:
        """ Find the host depth layer
        
        Find the depth layer containing x3. The function allows for situations is
        which the particle position lies outside of the specified grid but below
        zeta or above h. In which case, values are generally extrapolated. However,
        while this situation is allowed, it is not prioritised, and when this occurs
        the code run more slowly, as the model will first search the defined grid to
        try and find the particle.

        TODO - Implement this.
        """
        pass

    cpdef DTYPE_FLOAT_t get_xmin(self) except FLOAT_ERR:
        """ Get minimum x-value for the domain

        Returns
        -------
         : float
             The minimum value of `x` across the grid.
        """
        return self._xmin

    cpdef DTYPE_FLOAT_t get_ymin(self) except FLOAT_ERR:
        """ Get minimum y-value for the domain

        Returns
        -------
         : float
             The minimum value of `y` across the grid.
        """
        return self._ymin

    cdef DTYPE_FLOAT_t get_zmin(self, DTYPE_FLOAT_t time, Particle *particle) except FLOAT_ERR:
        """ Returns the bottom depth in cartesian coordinates

        h is defined at element nodes. Linear interpolation in space is used
        to compute h(x,y). NB the negative of h (which is +ve downwards) is
        returned.

        Parameters
        ----------
        time : float
            Time.

        particle: *Particle
            Pointer to a Particle object.

        Returns
        -------
        zmin : float
            The bottom depth.
        """
        cdef int i # Loop counters
        cdef int vertex # Vertex identifier
        cdef vector[DTYPE_FLOAT_t] h_tri = vector[DTYPE_FLOAT_t](N_VERTICES, -999.) # Bathymetry at nodes
        cdef DTYPE_FLOAT_t h # Bathymetry at (x1, x2)

        # Host element
        cdef DTYPE_INT_t host_element = particle.get_host_horizontal_elem(self._name_grid_rho)

        for i in xrange(N_VERTICES):
            vertex = self._nv_grid_rho[i, host_element]
            h_tri[i] = self._h[vertex]

        h = interp.interpolate_within_element(h_tri, particle.get_phi(self._name_grid_rho))

        return -h

    cdef DTYPE_FLOAT_t get_zmax(self, DTYPE_FLOAT_t time, Particle *particle) except FLOAT_ERR:
        """ Returns the sea surface height in cartesian coordinates

        zeta is defined at element nodes. Interpolation proceeds through linear
        interpolation in time followed by interpolation in space.

        TODO - Implement this.

        Parameters
        ----------
        time : float
            Time.

        particle: *Particle
            Pointer to a Particle object.
        
        Returns
        -------
        zmax : float
            Sea surface elevation.
        """
        pass

    cdef get_velocity(self, DTYPE_FLOAT_t time, Particle* particle,
            DTYPE_FLOAT_t vel[3]):
        """ Returns the velocity u(t,x,y,z) through linear interpolation
        
        Returns the velocity u(t,x,y,z) through interpolation for a particle.

        TODO - Implement this.

        Parameters
        ----------
        time : float
            Time at which to interpolate.
        
        particle: *Particle
            Pointer to a Particle object.

        Return
        ------
        vel : C array, float
            u/v/w velocity components stored in a C array.           
        """
        pass

    cdef DTYPE_FLOAT_t get_environmental_variable(self, var_name,
            DTYPE_FLOAT_t time, Particle *particle) except FLOAT_ERR:
        """ Returns the value of the given environmental variable through linear interpolation

        Support for extracting the following environmental variables has been implemented:

        thetao - Sea water potential temperature

        so - Sea water salinty

        TODO - Implement this.

        Parameters
        ----------
        var_name : str
            The name of the variable. See above for a list of supported options.

        time : float
            Time at which to interpolate.

        particle: *Particle
            Pointer to a Particle object.

        Returns:
        --------
        var : float
            The interpolated value of the variable at the specified point in time and space.
        """
        pass

    cdef get_horizontal_eddy_viscosity(self, DTYPE_FLOAT_t time,
            Particle* particle):
        """ Returns the horizontal eddy viscosity through linear interpolation

        TODO - Implement this.

        Parameters
        ----------
        time : float
            Time at which to interpolate.

        particle: *Particle
            Pointer to a Particle object.

        Returns
        -------
        viscofh : float
            The interpolated value of the horizontal eddy viscosity at the specified point in time and space.
        """
        pass

    cdef get_horizontal_eddy_viscosity_derivative(self, DTYPE_FLOAT_t time,
            Particle* particle, DTYPE_FLOAT_t Ah_prime[2]):
        """ Returns the gradient in the horizontal eddy viscosity

        Parameters
        ----------
        time : float
            Time at which to interpolate.
        
        particle: *Particle
            Pointer to a Particle object.

        Ah_prime : C array, float
            dAh_dx and dH_dy components stored in a C array of length two.  

        TODO - Implement this.

        References
        ----------
        Lynch, D. R. et al (2014). Particles in the coastal ocean: theory and
        applications. Cambridge: Cambridge University Press.
        doi.org/10.1017/CBO9781107449336
        """
        pass

    cdef DTYPE_FLOAT_t get_vertical_eddy_diffusivity(self, DTYPE_FLOAT_t time,
            Particle* particle) except FLOAT_ERR:
        """ Returns the vertical eddy diffusivity through linear interpolation.

        TODO - Implement this.

        Parameters
        ----------
        time : float
            Time at which to interpolate.
        
        particle: *Particle
            Pointer to a Particle object.
        
        Returns
        -------
        kh : float
            The vertical eddy diffusivity.        
        
        """
        pass

    cdef DTYPE_FLOAT_t get_vertical_eddy_diffusivity_derivative(self,
            DTYPE_FLOAT_t time, Particle* particle) except FLOAT_ERR:
        """ Returns the gradient in the vertical eddy diffusivity.
        
        Return a numerical approximation of the gradient in the vertical eddy 
        diffusivity at (t,x,y,z) using central differencing. First, the
        diffusivity is computed on the depth levels bounding the particle.
        Central differencing is then used to compute the gradient in the
        diffusivity on these levels. Finally, the gradient in the diffusivity
        is interpolated to the particle's exact position. This algorithm
        mirrors that used in GOTMDataReader, which is why it has been implemented
        here. However, in contrast to GOTMDataReader, which calculates the
        gradient in the diffusivity at all levels once each simulation time step,
        resulting in significant time savings, this function is executed once
        for each particle. It is thus quite costly! To make things worse, the 
        code, as implemented here, is highly repetitive, and no doubt efficiency
        savings could be found. 

        TODO - Implement this

        Parameters
        ----------
        time : float
            Time at which to interpolate.
        
        particle: *Particle
            Pointer to a Particle object.
        
        Returns
        -------
        k_prime : float
            Gradient in the vertical eddy diffusivity field.
        """
        pass

    cdef DTYPE_INT_t is_wet(self, DTYPE_FLOAT_t time, Particle *particle) except INT_ERR:
        """ Return an integer indicating whether `host' is wet or dry
        
        The function returns 1 if `host' is wet at time `time' and 
        0 if `host' is dry.
        
        The wet-dry distinction reflects two discrete states - either the
        element is wet, or it is dry. This raises the question of how to deal
        with intermediate times, such that td < t < tw where
        t is the current model time, and td and tw are conescutive input time
        points between which the host element switches from being dry to being
        wet. The approach taken is conservative, and involves flagging the
        element as being dry if either one or both of the input time points
        bounding the current model time indicate that the element is dry. In this
        simple procedure, the `time' parameter is actually unused.
        
        NB - just because an element is flagged as being dry does not mean
        that particles are necessarily frozen. Clients can still try to advect
        particles within such elements, and the interpolated velocity field may
        yield non-zero values, depending on the state of the host and
        surrounding elements in the given time window.

        TODO - Implement this.

        Parameters
        ----------
        time : float
            Time (unused)

        host : int
            Integer that identifies the host element in question
        """
        pass

    cdef DTYPE_FLOAT_t _get_variable(self, DTYPE_FLOAT_t[:, :] var_last, DTYPE_FLOAT_t[:, :] var_next,
            DTYPE_FLOAT_t time, Particle* particle) except FLOAT_ERR:
        """ Returns the value of the variable through linear interpolation

        Private method for interpolating fields specified at element nodes on depth levels.
        For particle at depths above h and above a lower level with masked nodes, extrapolation
        is used.

        TODO - Implement this.

        Parameters
        ----------
        var_last : 2D MemoryView
            Array of variable values at the last time index.

        var_next : 2D MemoryView
            Array of variable values at the next time index.

        time : float
            Time at which to interpolate.
        
        particle: *Particle
            Pointer to a Particle object. 
        
        Returns
        -------
        var : float
            The interpolated value of the variable at the specified point in time and space.
        """
        pass

    cdef DTYPE_FLOAT_t _get_variable_on_level(self, DTYPE_FLOAT_t[:, :] var_last_arr, DTYPE_FLOAT_t[:, :] var_next_arr,
            DTYPE_FLOAT_t time, Particle* particle, DTYPE_INT_t k_level) except FLOAT_ERR:
        """ Returns the value of the variable on a level through linear interpolation

        Private method for interpolating fields specified at element nodes on depth levels.
        For particle at depths above h and above a lower level with masked nodes, extrapolation
        is used.

        TODO - Implement this.

        Parameters
        ----------
        var_last_arr : 2D MemoryView
            Array of variable values at the last time index.

        var_next_arr : 2D MemoryView
            Array of variable values at the next time index.

        time : float
            Time at which to interpolate.

        particle: *Particle
            Pointer to a Particle object.

        k_level : int
            The dpeth level on which to interpolate.

        Returns
        -------
        var : float
            The interpolated value of the variable on the specified level
        """
        pass

    def _read_grid(self):
        """ Set grid and coordinate variables.
        
        All communications go via the mediator in order to guarantee support for
        both serial and parallel simulations.
        
        Parameters
        ----------
        N/A
        
        Returns
        -------
        N/A
        """
        # Read in the grid's dimensions
        self._n_longitude_grid_u = self.mediator.get_dimension_variable('longitude_grid_u')
        self._n_longitude_grid_v = self.mediator.get_dimension_variable('longitude_grid_v')
        self._n_longitude_grid_rho = self.mediator.get_dimension_variable('longitude_grid_rho')

        self._n_latitude_grid_u = self.mediator.get_dimension_variable('latitude_grid_u')
        self._n_latitude_grid_v = self.mediator.get_dimension_variable('latitude_grid_v')
        self._n_latitude_grid_rho = self.mediator.get_dimension_variable('latitude_grid_rho')

        self._n_nodes_grid_u = self.mediator.get_dimension_variable('node_grid_u')
        self._n_nodes_grid_v = self.mediator.get_dimension_variable('node_grid_v')
        self._n_nodes_grid_rho = self.mediator.get_dimension_variable('node_grid_rho')

        self._n_elems_grid_u = self.mediator.get_dimension_variable('element_grid_u')
        self._n_elems_grid_v = self.mediator.get_dimension_variable('element_grid_v')
        self._n_elems_grid_rho = self.mediator.get_dimension_variable('element_grid_rho')

        self._n_s_rho = self.mediator.get_dimension_variable('s_rho')
        self._n_s_w = self.mediator.get_dimension_variable('s_w')

        # Grid connectivity/adjacency
        self._nv_grid_u = self.mediator.get_grid_variable('nv_grid_u', (3, self._n_elems_grid_u), DTYPE_INT)
        self._nv_grid_v = self.mediator.get_grid_variable('nv_grid_v', (3, self._n_elems_grid_v), DTYPE_INT)
        self._nv_grid_rho = self.mediator.get_grid_variable('nv_grid_rho', (3, self._n_elems_grid_rho), DTYPE_INT)

        self._nbe_grid_u = self.mediator.get_grid_variable('nbe_grid_u', (3, self._n_elems_grid_u), DTYPE_INT)
        self._nbe_grid_v = self.mediator.get_grid_variable('nbe_grid_v', (3, self._n_elems_grid_v), DTYPE_INT)
        self._nbe_grid_rho = self.mediator.get_grid_variable('nbe_grid_rho', (3, self._n_elems_grid_rho), DTYPE_INT)

        # Raw grid x/y or lat/lon coordinates
        coordinate_system = self.config.get("OCEAN_CIRCULATION_MODEL", "coordinate_system").strip().lower()

        if coordinate_system == "spherical":
            x_grid_u = self.mediator.get_grid_variable('longitude_grid_u', (self._n_nodes_grid_u), DTYPE_FLOAT)
            y_grid_u = self.mediator.get_grid_variable('latitude_grid_u', (self._n_nodes_grid_u), DTYPE_FLOAT)
            xc_grid_u = self.mediator.get_grid_variable('longitude_c_grid_u', (self._n_elems_grid_u), DTYPE_FLOAT)
            yc_grid_u = self.mediator.get_grid_variable('latitude_c_grid_u', (self._n_elems_grid_u), DTYPE_FLOAT)

            x_grid_v = self.mediator.get_grid_variable('longitude_grid_v', (self._n_nodes_grid_v), DTYPE_FLOAT)
            y_grid_v = self.mediator.get_grid_variable('latitude_grid_v', (self._n_nodes_grid_v), DTYPE_FLOAT)
            xc_grid_v = self.mediator.get_grid_variable('longitude_c_grid_v', (self._n_elems_grid_v), DTYPE_FLOAT)
            yc_grid_v = self.mediator.get_grid_variable('latitude_c_grid_v', (self._n_elems_grid_v), DTYPE_FLOAT)

            x_grid_rho = self.mediator.get_grid_variable('longitude_grid_rho', (self._n_nodes_grid_rho), DTYPE_FLOAT)
            y_grid_rho = self.mediator.get_grid_variable('latitude_grid_rho', (self._n_nodes_grid_rho), DTYPE_FLOAT)
            xc_grid_rho = self.mediator.get_grid_variable('longitude_c_grid_rho', (self._n_elems_grid_rho), DTYPE_FLOAT)
            yc_grid_u = self.mediator.get_grid_variable('latitude_c_grid_u', (self._n_elems_grid_u), DTYPE_FLOAT)

            # Don't apply offsets in spherical case - set them to 0.0!
            self._xmin = 0.0
            self._ymin = 0.0
        else:
            raise ValueError("Unsupported model coordinate system `{}'".format(coordinate_system))

        # Apply offsets
        x_grid_u = x_grid_u - self._xmin
        y_grid_u = y_grid_u - self._ymin
        xc_grid_u = xc_grid_u - self._xmin
        yc_grid_u = yc_grid_u - self._ymin

        x_grid_v = x_grid_v - self._xmin
        y_grid_v = y_grid_v - self._ymin
        xc_grid_v = xc_grid_v - self._xmin
        yc_grid_v = yc_grid_v - self._ymin

        x_grid_rho = x_grid_rho - self._xmin
        y_grid_rho = y_grid_rho - self._ymin
        xc_grid_rho = xc_grid_rho - self._xmin
        yc_grid_rho = yc_grid_rho - self._ymin

        # Initialise the unstructured grids
        self._unstructured_grid_u = UnstructuredGrid(self.config, self._name_grid_u, self._n_nodes_grid_u,
                                                     self._n_elems_grid_u, self._nv_grid_u, self._nbe_grid_u,
                                                     x_grid_u, y_grid_u, xc_grid_u, yc_grid_u)

        self._unstructured_grid_v = UnstructuredGrid(self.config, self._name_grid_v, self._n_nodes_grid_v,
                                                     self._n_elems_grid_v, self._nv_grid_v, self._nbe_grid_v,
                                                     x_grid_v, y_grid_v, xc_grid_v, yc_grid_v)

        self._unstructured_grid_rho = UnstructuredGrid(self.config, self._name_grid_rho, self._n_nodes_grid_rho,
                                                     self._n_elems_grid_rho, self._nv_grid_rho, self._nbe_grid_rho,
                                                     x_grid_rho, y_grid_rho, xc_grid_rho, yc_grid_rho)

        # Read in depth vars
        self._s_rho = self.mediator.get_grid_variable('s_rho', (self._n_s_rho), DTYPE_FLOAT)
        self._cs_r = self.mediator.get_grid_variable('cs_r', (self._n_s_rho), DTYPE_FLOAT)
        self._s_w = self.mediator.get_grid_variable('s_w', (self._n_s_w), DTYPE_FLOAT)
        self._cs_w = self.mediator.get_grid_variable('cs_w', (self._n_s_w), DTYPE_FLOAT)
        self._hc = self.mediator.get_grid_variable('hc', (1), DTYPE_FLOAT)

        # Bathymetry
        self._h = self.mediator.get_grid_variable('h', (self._n_nodes_grid_rho), DTYPE_FLOAT)

        # Land sea mask - nodes
        self._mask_grid_u = self.mediator.get_grid_variable('mask_grid_u', (self._n_nodes_grid_u), DTYPE_INT)
        self._mask_grid_v = self.mediator.get_grid_variable('mask_grid_v', (self._n_nodes_grid_v), DTYPE_INT)
        self._mask_grid_rho = self.mediator.get_grid_variable('mask_grid_rho', (self._n_nodes_grid_rho), DTYPE_INT)

        # Land sea mask - elements (grid rho only)
        self._mask_c_grid_rho = self.mediator.get_grid_variable('mask_c_grid_rho', (self._n_elems_grid_rho), DTYPE_INT)

    cdef _read_time_dependent_vars(self):
        """ Update time variables and memory views for data fields.
        
        For each time-dependent variable needed by PyLag two references
        are stored. These correspond to the last and next time points at which
        data was saved. Together these bound PyLag's current time point.
        
        All communications go via the mediator in order to guarantee support for
        both serial and parallel simulations.
        
        Parameters
        ----------
        N/A
        
        Returns
        -------
        N/A
        """
        cdef DTYPE_INT_t i, j, k
        cdef DTYPE_INT_t node
        cdef DTYPE_INT_t is_wet_last, is_wet_next

        # Update time references
        self._time_last = self.mediator.get_time_at_last_time_index()
        self._time_next = self.mediator.get_time_at_next_time_index()

        # Update memory views for zeta
        if self._has_zeta:
            zeta_var_name = self._variable_names['zos']

            # Zeta at last time step
            zeta_last = self.mediator.get_time_dependent_variable_at_last_time_index(zeta_var_name,
                    self._variable_shapes['zos'], DTYPE_FLOAT)
            self._zeta_last = self._reshape_var(zeta_last, self._variable_dimension_indices['zos'])

            # Zeta at next time step
            zeta_next = self.mediator.get_time_dependent_variable_at_next_time_index(zeta_var_name,
                    self._variable_shapes['zos'], DTYPE_FLOAT)
            self._zeta_next = self._reshape_var(zeta_next, self._variable_dimension_indices['zos'])
        else:
            # If zeta wasn't given, set it to zero throughout
            self._zeta_last = np.zeros((self._n_nodes), dtype=DTYPE_FLOAT)
            self._zeta_next = np.zeros((self._n_nodes), dtype=DTYPE_FLOAT)

        # Update memory views for u
        u_var_name = self._variable_names['uo']
        u_last = self.mediator.get_time_dependent_variable_at_last_time_index(u_var_name,
                self._variable_shapes['uo'], DTYPE_FLOAT)
        self._u_last = self._reshape_var(u_last, self._variable_dimension_indices['uo'])

        u_next = self.mediator.get_time_dependent_variable_at_next_time_index(u_var_name,
                self._variable_shapes['uo'], DTYPE_FLOAT)
        self._u_next = self._reshape_var(u_next, self._variable_dimension_indices['uo'])

        # Update memory views for v
        v_var_name = self._variable_names['vo']
        v_last = self.mediator.get_time_dependent_variable_at_last_time_index(v_var_name,
                self._variable_shapes['vo'], DTYPE_FLOAT)
        self._v_last = self._reshape_var(v_last, self._variable_dimension_indices['vo'])

        v_next = self.mediator.get_time_dependent_variable_at_next_time_index(v_var_name,
                self._variable_shapes['vo'], DTYPE_FLOAT)
        self._v_next = self._reshape_var(v_next, self._variable_dimension_indices['vo'])

        # Update memory views for w
        if self._has_w:
            w_var_name = self._variable_names['wo']
            w_last = self.mediator.get_time_dependent_variable_at_last_time_index(w_var_name,
                    self._variable_shapes['wo'], DTYPE_FLOAT)
            self._w_last = self._reshape_var(w_last, self._variable_dimension_indices['wo'])

            w_next = self.mediator.get_time_dependent_variable_at_next_time_index(w_var_name,
                    self._variable_shapes['wo'], DTYPE_FLOAT)
            self._w_next = self._reshape_var(w_next, self._variable_dimension_indices['wo'])

        # Update depth mask
        depth_mask_last = self.mediator.get_mask_at_last_time_index(u_var_name,
                self._variable_shapes['uo'])
        self._depth_mask_last = self._reshape_var(depth_mask_last, self._variable_dimension_indices['uo'])

        depth_mask_next = self.mediator.get_mask_at_next_time_index(u_var_name,
                self._variable_shapes['uo'])
        self._depth_mask_next = self._reshape_var(depth_mask_next, self._variable_dimension_indices['uo'])

        # Compute actual depth levels using reference values and zeta
        for k in xrange(self._n_depth):
            for i in xrange(self._n_nodes):
                self._depth_levels_last[k, i] = self._reference_depth_levels[k] + self._zeta_last[i]
                self._depth_levels_next[k, i] = self._reference_depth_levels[k] + self._zeta_next[i]

        # Update memory views for kh
        if self._has_Kh:
            kh_var_name = self._variable_names['Kh']
            kh_last = self.mediator.get_time_dependent_variable_at_last_time_index(kh_var_name,
                    self._variable_shapes['Kh'], DTYPE_FLOAT)
            self._kh_last = self._reshape_var(kh_last, self._variable_dimension_indices['Kh'])

            kh_next = self.mediator.get_time_dependent_variable_at_next_time_index(kh_var_name,
                    self._variable_shapes['Kh'], DTYPE_FLOAT)
            self._kh_next = self._reshape_var(kh_next, self._variable_dimension_indices['Kh'])

        # Update memory views for Ah
        if self._has_Ah:
            ah_var_name = self._variable_names['Ah']
            ah_last = self.mediator.get_time_dependent_variable_at_last_time_index(ah_var_name,
                    self._variable_shapes['Ah'], DTYPE_FLOAT)
            self._ah_last = self._reshape_var(ah_last, self._variable_dimension_indices['Ah'])

            ah_next = self.mediator.get_time_dependent_variable_at_next_time_index(ah_var_name,
                    self._variable_shapes['Ah'], DTYPE_FLOAT)
            self._ah_next = self._reshape_var(ah_next, self._variable_dimension_indices['Ah'])

        # Set is wet status
        # NB the status of cells is inferred from the depth mask and the land-sea element mask. If a surface cell is
        # masked but it is not a land cell, then it is assumed to be dry.
        for i in xrange(self._n_elems):
            if self._land_sea_mask[i] == 0:
                is_wet_last = 1
                is_wet_next = 1
                for j in xrange(3):
                    node = self._nv[j, i]
                    if self._depth_mask_last[0, node] == 1:
                        is_wet_last = 0
                    if self._depth_mask_next[0, node] == 1:
                        is_wet_next = 0
                self._wet_cells_last[i] = is_wet_last
                self._wet_cells_next[i] = is_wet_next

        # Read in data as requested
        if 'thetao' in self.env_var_names:
            var_name = self._variable_names['thetao']
            thetao_next = self.mediator.get_time_dependent_variable_at_next_time_index(var_name,
                    self._variable_shapes['thetao'], DTYPE_FLOAT)
            self._thetao_next = self._reshape_var(thetao_next, self._variable_dimension_indices['thetao'])

            thetao_last = self.mediator.get_time_dependent_variable_at_last_time_index(var_name,
                    self._variable_shapes['thetao'], DTYPE_FLOAT)
            self._thetao_last = self._reshape_var(thetao_last, self._variable_dimension_indices['thetao'])

        if 'so' in self.env_var_names:
            var_name = self._variable_names['so']
            so_next = self.mediator.get_time_dependent_variable_at_next_time_index(var_name,
                    self._variable_shapes['so'], DTYPE_FLOAT)
            self._so_next = self._reshape_var(so_next, self._variable_dimension_indices['so'])

            so_last = self.mediator.get_time_dependent_variable_at_last_time_index(var_name,
                    self._variable_shapes['so'], DTYPE_FLOAT)
            self._so_last = self._reshape_var(so_last, self._variable_dimension_indices['so'])

        return

    def _reshape_var(self, var, dimension_indices):
        """ Reshape variable for PyLag

        Variables with the following dimensions are supported:

        2D - [lat, lon] in any order

        3D - [depth, lat, lon] in any order

        Parameters
        ----------
        var : NDArray
            The variable to sort

        dimension_indices : dict
            Dictionary of dimension indices

        Returns
        -------
        var_reshaped : NDArray
            Reshaped variable
        """
        n_dimensions = len(var.shape)

        if n_dimensions == 2:
            lat_index = dimension_indices['latitude']
            lon_index = dimension_indices['longitude']

            # Shift axes to give [x, y]
            var = np.moveaxis(var, lon_index, 0)

            return var.reshape(np.prod(var.shape), order='C')[:]

        elif n_dimensions == 3:
            depth_index = dimension_indices['depth']
            lat_index = dimension_indices['latitude']
            lon_index = dimension_indices['longitude']

            # Shift axes to give [z, x, y]
            var = np.moveaxis(var, depth_index, 0)

            # Update lat/lon indices if needed
            if depth_index > lat_index:
                lat_index += 1
            if depth_index > lon_index:
                lon_index += 1

            var = np.moveaxis(var, lon_index, 1)

            return var.reshape(var.shape[0], np.prod(var.shape[1:]), order='C')[:]
        else:
            raise ValueError('Unsupported number of dimensions {}.'.format(n_dimensions))

    cdef DTYPE_INT_t _interp_mask_status_on_level(self,
            DTYPE_INT_t host, DTYPE_INT_t kidx) except INT_ERR:
        """ Return the masked status of the given depth level
 
        Parameters
        ----------
        phi : c array, float
            Array of length three giving the barycentric coordinates at which 
            to interpolate.
            
        host : int
            Host element index.

        kidx : int
            Sigma layer on which to interpolate.

        Returns
        -------
        mask : int
            Masked status (1 is masked, 0 not masked).
        """
        cdef int vertex # Vertex identifier
        cdef DTYPE_INT_t mask_status_last, mask_status_next
        cdef DTYPE_INT_t mask
        cdef DTYPE_INT_t i

        mask = 0
        for i in xrange(N_VERTICES):
            vertex = self._nv[i,host]
            mask_status_last = self._depth_mask_last[kidx, vertex]
            mask_status_next = self._depth_mask_next[kidx, vertex]

            if mask_status_last == 1 or mask_status_next == 1:
                mask = 1
                break

        return mask

