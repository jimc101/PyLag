"""
This Cython module has the purpose of providing clients with rapid access to 
pseudo random numbers generated by algorithms that form part of the GNU 
Scientific Library (GSL). While Python includes its own module for the
generation of pseudo random numbers (random), calls to it are made through 
Python's API, which is comparatively slow. Using CythonGSL - a set of Cython 
wrappers for GSL - this cost is avoided. For the Mersenne Twister pseudo RNG, 
tests indicate CythonGSL yeilds a ~ 5X speedup compared with Python's random 
module.
"""

import time
import logging

cimport cython
from cython_gsl cimport gsl_rng, gsl_rng_alloc, gsl_rng_set, gsl_rng_mt19937, gsl_ran_gaussian

from data_types_cython cimport DTYPE_INT_t, DTYPE_FLOAT_t

# gsl_rng_mt19937 is the Mersenne Twister pseudo random number generator
cdef gsl_rng *r = gsl_rng_alloc(gsl_rng_mt19937)

def seed(seed=None):
    """
    Seed the random number generator. If seed is None, use the system clock 
    time.
    
    Parameters:
    -----------
    seed: long, optional
        The seed to be used.
    """
    if seed is None:
        seed = long(time.time() * 256) # Mimics seed generation method in random.py
    else:
        seed = long(seed)

    # Set the seed for the RNG
    gsl_rng_set(r, seed)

    # Log this value
    logger = logging.getLogger(__name__)
    logger.info('Random number seeded with seed {}'.format(seed))
        
cpdef gauss(DTYPE_FLOAT_t std = 1.0):
    """
    Generate a deviate from a Gaussian distribution with std 1.0 and mean 0.0.
    
    Parameters:
    -----------
    std: float, optional
        Standard deviation of the Gaussian distribution.
    """
    cdef DTYPE_FLOAT_t deviate
    deviate = gsl_ran_gaussian(r, std)
    return deviate
