"""
This Cython module has the purpose of providing clients with rapid access to 
pseudo random numbers generated by algorithms that form part of the GNU 
Scientific Library (GSL). While Python includes its own module for the
generation of pseudo random numbers (random), calls to it are made through 
Python's API, which is comparatively slow. Using CythonGSL - a set of Cython 
wrappers for GSL - this cost is avoided. For the Mersenne Twister pseudo RNG, 
tests indicate CythonGSL yeilds a ~ 5X speedup compared with Python's random 
module.
"""
import os
import time

cimport cython
from cython_gsl cimport gsl_rng, gsl_rng_alloc, gsl_rng_set, gsl_rng_mt19937, gsl_ran_gaussian, gsl_ran_flat

from data_types_cython cimport DTYPE_INT_t, DTYPE_FLOAT_t

# gsl_rng_mt19937 is the Mersenne Twister pseudo random number generator
cdef gsl_rng *r = gsl_rng_alloc(gsl_rng_mt19937)

# Seed for the PRNG
_seed = None

def get_seed():
    """Return the value of the seed used with the PRNG.

    """
    return _seed

def seed(seed=None):
    """
    Seed the random number generator. If seed is None, use a combination of the
    system time and processor ID to set the random seed. The approach ensures
    each worker uses a unique seed during parallel simulations. Algorithm
    adapted from http://goo.gl/BVxgFl.
    
    Parameters:
    -----------
    seed: long, optional
        The seed to be used.
    """
    global _seed
    
    if seed is None:
        # Initialise the PRNG. Use the pid to ensure each worker uses a unique seed
        pid = os.getpid()
        s = time.time() * 256
        _seed = long(abs(((s*181)*((pid-83)*359))%104729))
    else:
        _seed = long(seed)

    # Set the seed for the RNG
    gsl_rng_set(r, _seed)
        
cpdef DTYPE_FLOAT_t gauss(DTYPE_FLOAT_t std = 1.0):
    """
    Generate a random Gaussian variate. The Gaussian distribution has a standard
    deviation of std, and a mean of 0.0.
    
    Parameters:
    -----------
    std: float, optional
        Standard deviation of the Gaussian distribution.
        
    Returns:
    --------
    variate: float
        Random Gaussian variate
    """
    cdef DTYPE_FLOAT_t variate
    variate = gsl_ran_gaussian(r, std)
    return variate

cpdef DTYPE_FLOAT_t uniform(DTYPE_FLOAT_t a = -1.0, DTYPE_FLOAT_t b = 1.0):
    """
    Generate a random variate within the range [a, b].
    
    Parameters:
    -----------
    a: float, optional
        Lower limit
    b: float, optional
        Upper limit
        
    Returns:
    --------
    variate: float
        Random variate
    """
    cdef DTYPE_FLOAT_t variate
    variate = gsl_ran_flat(r, a, b)
    return variate
